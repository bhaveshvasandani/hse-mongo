#!groovy
@Library(['sbusw-pipeline', 'sbusw-private']) _
// TODO: Below property need to be added, this one gives error
//[$class: 'BuildBlockerProperty', blockLevel: <object of type hudson.plugins.buildblocker.BuildBlockerProperty.BlockLevel>, blockingJobs: '', scanQueueFor: <object of type hudson.plugins.buildblocker.BuildBlockerProperty.QueueScanScope>, useBuildBlocker: false],
// TODO: rebuild plugin not available, removed for now
//[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],

// TODO: Build after other projects (nightfury, mongo-mse)

def mongo_mse_kvdb_build_cmd1 = '''
# This is an unusual build job, in that it works within a larger build.
# mongo-mse-kvdb is a connector "plugin" for mongodb, and the way the mongodb
# build is structured, you must build it within the overall mongodb tree.  We
# set that up here, assuming that the git plugin has already checked out the
# mse connector in src/mongo/db/modules/mongo-mse-kvdb.

# Disables output in Email
echo "BUILDLOG_END_TAG" >> ${SBUDEVOPS_STATUS_FILE}

# Load shell libraries (banner/err)
. /usr/local/lib/jenkins.sh

set -e -x -u

#
# We do not have support yet for switching the kernel in the test VM.
#
case ${NIGHT_FURY_BRANCH} in
nfv_0_1_0)
    banner "We do not support unit testing on 4.9.31-nf at this time"
    exit 1
    ;;
*)
    ;;
esac

banner "Building ${sourceBranch}"

banner "Jenkins Environment"
env
set

#
# Now the rebasing and merging magic happens.
#
banner "Checkout code"
LOCAL_BRANCH=`basename ${GIT_BRANCH}`
GIT_AUTHOR_NAME=`git show -s --format=format:"%an" $GIT_COMMIT`
GIT_AUTHOR_EMAIL=`git show -s --format=format:"%ae" $GIT_COMMIT`
git branch {GIT_INTEGRATION_BRANCH} ${GIT_REMOTE_NAME}/${GIT_INTEGRATION_BRANCH}
git branch ${LOCAL_BRANCH} ${GIT_REMOTE_NAME}/${GIT_BRANCH}
git checkout ${LOCAL_BRANCH}

banner "Rebase to ${GIT_INTEGRATION_BRANCH}"
if ( git rebase --keep-empty ${GIT_REMOTE_NAME}/${GIT_INTEGRATION_BRANCH} )
then
    banner "Rebase was successful, attempting --no-ff merge"
    GIT_NEW_HEAD=`git rev-list -1 HEAD`
    git checkout ${GIT_INTEGRATION_BRANCH}

    git -c user.name="${GIT_AUTHOR_NAME}" \
        -c user.email="${GIT_AUTHOR_EMAIL}" \
        merge --commit --no-ff --stat \
            -m "Merge ${sourceBranch}" \
            ${GIT_NEW_HEAD} || ( echo "**** MERGE AFTER REBASE FAILED! ****"; exit 1 )
else
    banner "Rebase failed, attempting regular merge"
    git rebase --abort || true
    git reset --hard HEAD
    GIT_NEW_HEAD=$GIT_COMMIT
    git checkout ${GIT_INTEGRATION_BRANCH}
    git -c user.name="${GIT_AUTHOR_NAME}" \
        -c user.email="${GIT_AUTHOR_EMAIL}" \
        merge --commit --stat \
            -m "Merge ${sourceBranch}" \
            ${GIT_NEW_HEAD}  || ( echo "**** MERGE FAILED! ****"; exit 1 )
fi
    '''.stripMargin()
    
def mongo_mse_kvdb_build_cmd2 = '''
# Load shell libraries (banner/err)
. /usr/local/lib/jenkins.sh

set -e -x -u

#
# Code formatting.  Mongo code must pass clang-format.  Could move to prerun
# checks.
#
if [ "${SKIP_CLANG_FORMAT}" = "false" ]
then
    banner "Check code formatting"
    ${WORKSPACE}/buildscripts/clang_format.py -c ${CLANG_FORMAT} lint
fi

case ${GIT_INTEGRATION_BRANCH} in
master*)
    NAPPROVERS=${SBUDEVOPS_PR_APPROVERS}
    ;;
nfv_[0-9]_[0-9]_[0-9]*)
    NAPPROVERS=$((SBUDEVOPS_PR_APPROVERS-1))
    ;;
esac

banner "Verify Pull Request"
#/usr/local/bin/pull_request --repo ${sourceRepositoryName} \
#    --verify-approvers ${NAPPROVERS} ${GIT_COMMIT}

banner "Verify Jira issue exists and is in correct state"
#/usr/local/bin/issue_in_branch \
#    --status 'In Progress' \
#    --branch ${sourceBranch} ${GIT_COMMIT}

#banner "Verify SQA pre-testing"
#/usr/local/bin/sqa_test \
#   --build-project mse-mongo-kvdb-standalone-make\
#   --commit-sha $GIT_COMMIT || true

# Write status
banner "Writing status to SBUDEVOPS_STATUS_FILE"
echo "BUILDLOG_START_TAG" > $SBUDEVOPS_STATUS_FILE
if [ -z ${SBUDEVOPS_STATUS_FILE+x} ]
then
    echo "SBUDEVOPS_STATUS_FILE is unset, no status logging"
else
    GIT_AUTHOR_NAME=`git show -s --format=format:"%an" ${GIT_COMMIT}`
    GIT_AUTHOR_EMAIL=`git show -s --format=format:"%ae" ${GIT_COMMIT}`

    banner "Commit information"                   >> ${SBUDEVOPS_STATUS_FILE}
    echo "Branch: ${sourceBranch}"                >> ${SBUDEVOPS_STATUS_FILE}
    echo "Repository: ${sourceRepositoryName}"    >> ${SBUDEVOPS_STATUS_FILE}
    echo "GIT Commit: ${GIT_COMMIT}"              >> ${SBUDEVOPS_STATUS_FILE}
    echo "Last Commit Author: ${GIT_AUTHOR_NAME}" >> ${SBUDEVOPS_STATUS_FILE}
    echo "Committer Email: ${GIT_AUTHOR_EMAIL}"   >> ${SBUDEVOPS_STATUS_FILE}
    
    
    #banner "JIRA issue(s)"                      >> ${SBUDEVOPS_STATUS_FILE}
    #/usr/local/bin/issue_in_branch --show-issue-url \
    #    --branch ${sourceBranch} ${GIT_COMMIT} >> ${SBUDEVOPS_STATUS_FILE} 2>&1
    
    #banner "Pull Request"                       >> ${SBUDEVOPS_STATUS_FILE}
    #/usr/local/bin/pull_request --repo ${sourceRepositoryName} \
    #    --verify-approvers ${NAPPROVERS} ${GIT_COMMIT} >> ${SBUDEVOPS_STATUS_FILE} 2>&1
    
    #banner "Files Changed"                      >> ${SBUDEVOPS_STATUS_FILE}
    git cherry ${GIT_REMOTE_NAME}/${GIT_INTEGRATION_BRANCH} ${GIT_COMMIT} | \
        awk '{print $2}' | \
        while read sha
        do
            git diff-tree --no-commit-id --name-only -r $sha
        done | sort -u 2>&1 | tee -a ${SBUDEVOPS_STATUS_FILE}
    
    #banner "Verify SQA pre-testing"             >> ${SBUDEVOPS_STATUS_FILE}
    #/usr/local/bin/sqa_test --build-project mongo-mse-kvdb-standalone-make \
    #    --commit-sha ${GIT_COMMIT} >> ${SBUDEVOPS_STATUS_FILE} 2>&1 || true

fi

# Stop logging to status file
echo "BUILDLOG_END_TAG" >> ${SBUDEVOPS_STATUS_FILE}

#
# Install devel package from nightfury project
# Extract SHA artifact and preserve it here as well as future glue
#
NF_BUILD_TYPE="release"

case ${BUILD_TYPE} in
    debug)
        NF_BUILD_TYPE="debug"
        ;;
    *)
        NF_BUILD_TYPE="release"
        ;;
esac

# install mpool-kmod, mpool and hse packages
/usr/local/bin/install_hse --target-branch ${NIGHT_FURY_BRANCH} --rpm-group all --make-type ${NF_BUILD_TYPE} --os_type ${OS_TYPE} --install-on-target `hostname`
#
# Unlike nightfury, we only currently do one build type; however, to allow for
# doing multiple types, we'll still use a loop.
#
BUILDS="${BUILD_TYPE}"
echo "BUILDS=${BUILDS}"
for phase in compile test
do
    for build in ${BUILDS}
    do
        banner "Build: ${phase} the ${build} build"
        
        case ${build} in
        release)
            EXTRA_SCONS_OPTS="--opt=on --dbg=off"
            ;;
        relwithdebug)
            EXTRA_SCONS_OPTS=""
            ;;
        debug)
            EXTRA_SCONS_OPTS="--opt=off --dbg=on"
            ;;
        esac
        
        case "${phase}" in
        compile) 
            if [ "${CLEAN_SCONS_CACHE}" = "true" ]
            then
                rm -rf ${SCONS_CACHE}
            fi
        
            mkdir -p ${SCONS_CACHE}

            scons -j$(nproc) \
                --dbg=off --opt=on \
                --disable-warnings-as-errors all hse_unit_tests
            ;;
        test)
            # Run a test on a throwaway VM.
            #
            #cd build/cached/mongo/db/modules/mongo-mse-kvdb
            cd build/opt/mongo/db/storage/hse
            zip ${WORKSPACE}/${BUILD_TAG}.zip storage* *.py
            cd ${WORKSPACE}
            
            banner "Cloning VM on ${KVM_HOST}..."
            TEST_VM=$(/usr/local/bin/kvm --kvmhost ${KVM_HOST} --createvm 1 --memory 32G)
            echo ${TEST_VM} > TEST_VM
            
            banner "Installing hse RPM on ${TEST_VM}..."
            /usr/local/bin/install_hse --target-branch ${NIGHT_FURY_BRANCH} --rpm-group all --make-type ${NF_BUILD_TYPE} --os_type ${OS_TYPE} --install-on-target ${TEST_VM}
            
            banner "Copying unit test files to ${TEST_VM}..."
            REMOTE_DEST=/tmp/
            RUN_USER=root
            SSH_OPTS='-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
            scp ${SSH_OPTS} ${BUILD_TAG}.zip ${RUN_USER}@${TEST_VM}:${REMOTE_DEST}
            ssh ${SSH_OPTS} ${RUN_USER}@${TEST_VM} "cd ${REMOTE_DEST}; unzip -d ${BUILD_TAG} ${BUILD_TAG}.zip"
            
            banner "Running unit tests on ${TEST_VM}"
            ssh ${SSH_OPTS} ${RUN_USER}@${TEST_VM} \
                "cd ${REMOTE_DEST}/${BUILD_TAG}; ./hse_test_harness.py ${BUILD_NUMBER} /usr/bin/hse mp1 /dev/vdb"
            
            banner "Fetching unit test results from ${TEST_VM}"
            scp ${SSH_OPTS} ${RUN_USER}@${TEST_VM}:${REMOTE_DEST}/${BUILD_TAG}/${BUILD_NUMBER}.db .
            
            banner "Compare to prior run to check for regressions"
            #/usr/local/bin/mongo_mse_kvdb_ut_compare $(ls *.db | sort -n) || grant_exception ${sourceBranch}
            ;;
        *)
            echo "Jenkins script bug!"
            exit 1
            ;;
        esac
    done
done

banner "RPM version"
Version=`rpm -qi ${NFRPM_NAME} | grep Version | awk '{print $3}'`
Release=`rpm -qi ${NFRPM_NAME} | grep Release | awk '{print $3}'`
SBUDEVOPS_NF_VERSION="${Version}-${Release}"
echo "SBUDEVOPS_NF_VERSION=$SBUDEVOPS_NF_VERSION" > $SBUDEVOPS_NF_VERSION_PROPERTY

banner "Recording SHA of the tip of new branch"
git rev-parse HEAD > ${GIT_INTEGRATION_BRANCH}.RECORDED_SHA

banner "Update Jira issue, must run before git push"
# 'updates' in branch prefix updates the issue comment
# anything else updates the issue comment AND transitions it to Verify state
# This may change down the road

case "${sourceBranch}" in
    (updates/*)
        banner "Issue update, no transition"
        /usr/local/bin/issue_in_branch --branch ${sourceBranch} \
            ${GIT_COMMIT} --comment-from-file ${SBUDEVOPS_STATUS_FILE} \
            --comment "hse ver ${SBUDEVOPS_NF_VERSION}"
        ;;
    (*)
        banner "Issue transition and update"
        /usr/local/bin/issue_in_branch --transition-bug 'verify' \
            --transition-task 'verify' --branch ${sourceBranch} ${GIT_COMMIT} \
            --comment-from-file ${SBUDEVOPS_STATUS_FILE} \
            --comment "hse ver ${SBUDEVOPS_NF_VERSION}"
        ;;
esac

banner "Push to ${GIT_INTEGRATION_BRANCH}"
git push ${GIT_REMOTE_NAME} ${GIT_INTEGRATION_BRANCH}

banner "Delete ${sourceBranch}"
# Ignore errors when deleting the source branch.  By now the branch has been
# merged, so no point in having the build fail just because we can't cleanup
# the source branch.
git push ${GIT_REMOTE_NAME}  ":${sourceBranch}" || true

    '''.stripMargin()

def uninstall_nf_devel_cmd = '''
    case "${NIGHT_FURY_BRANCH}" in
    nfpib|nfv_[1-9]*)
        NFRPM_NAME="hse-devel"
        ;;
    nfv_0*)
        NFRPM_NAME="mse-devel"
        ;;
    *)
        echo "Unsupported NIGHT_FURY_BRANCH:  ${NIGHT_FURY_BRANCH}" >&2
        echo "We only support nfpib and release branches" >&2
        exit 1
        ;;
    esac

    sudo dnf erase -y ${NFRPM_NAME}
    rm -rf ${HOME}/rpmbuild/*/*     
    '''.stripMargin()

def restore_vm_clean_build_data_cmd = '''
    . /usr/local/lib/jenkins.sh

    banner "Please restore VM cleanup"
    [ -f TEST_VM ] && /usr/local/bin/kvm --kvmhost ${KVM_HOST} --destroyvm $(cat TEST_VM)
    '''.stripMargin()

pipeline {
    environment {
        PRIOR_TEST_RESULTS_DIR = "/shared/builds/jenkins/artifacts/${JOB_NAME}/${targetBranch}"
        HTTPS_BITBUCKET = 'https://bitbucket.micron.com/bbdc'
        SSH_BITBUCKET = 'ssh://git@bitbucket.micron.com'

        GIT_BRANCH = "${sourceBranch}"
        GIT_COMMIT = "${PULL_REQUEST_FROM_HASH}"
        JENKINS_CONF = '/usr/local/etc/jenkins_env_bo.conf'
        /* NIGHT_FURY_BRANCH = "${targetBranch}".substring(
            0,
            "${targetBranch}".indexOf("-r${MONGOVERSION}")
        )*/
        NIGHT_FURY_BRANCH = "master"
        repoName = "${sourceRepositoryName}"
        SBU_SSH_OPTS = "-o StrictHostKeyChecking=no"
        SBUDEVOPS_JENKINS_BRANCH = "${NIGHT_FURY_BRANCH}"
        SBUDEVOPS_JENKINS_SCRIPT_REPO = "${SSH_BITBUCKET}/sbuswit/jenkins-scripts.git"
    }
    parameters {
        /*
         * From Bitbucket PR Notifier
         */
        string(
            name: 'destinationCommitHash',
            defaultValue: 'master',
            description: 'HEAD of target branch'
        )
        string(
            name: 'destinationRepositoryName',
            defaultValue: 'master',
            description: 'target branch to which we push the merge commit'
        )
        string(
            name: 'GIT_REMOTE_NAME',
            defaultValue: 'origin',
            description: 'named remote we are using'
        )
        string(
            name: 'PULL_REQUEST_FROM_SSH_CLONE_URL',
            defaultValue: '',
            description: 'value passed from Bitbucket by Pull Request Notifier'
        )
        string(
            name: 'GIT_URL',
            defaultValue: "${params.PULL_REQUEST_FROM_SSH_CLONE_URL}",
            description: 'URL to the repo we are using'
        )
        string(
            name: 'PULL_REQUEST_FROM_HASH',
            defaultValue: '',
            description: 'Commit hash from source branch of PR'
        )
        string(
            name: 'pullRequestId',
            defaultValue: 'NaN',
            description: 'PR number in the repository'
        )
        string(
            name: 'sourceRepositoryName',
            defaultValue: 'master',
            description: 'branch from which we clone everything'
        )
        string(
            name: 'sourceBranch',
            defaultValue: 'master',
            description: 'source branch for the merge'
        )
        string(
            name: 'targetBranch',
            defaultValue: 'master',
            description: 'target branch for the merge'
        )

        /*
         * Parameters a user might enter
         */
        choice(
            name: 'BUILD_TYPE',
            choices: 'relwithdebug\ndebug\nrelease',
            description: '<dl><dt>relwithdebug</dt><dd>debugging symbols, optimized</dd><dt>debug</dt><dd>debugging symbols, no optimization</dd><dt>release</dt><dd>no debugging symbols, optimized</dd></dl>'
        )
        choice(
            name: 'MONGOVERSION',
            choices: '3.4.17.1\n3.4.7\n3.4.2',
            description: '',
        )
        string(
            name: 'CLANG_FORMAT',
            defaultValue: '/shared/static/tarballs/mongodb/clang-format-3.8.0-linux',
            description: '',
            trim: false
        )
        choice(
            name: 'NODE',
            choices: 'fc25\nel7\nel6',
            description: 'Node ip or label',
        )
        booleanParam(
            name: 'CLEAN_SCONS_CACHE',
            defaultValue: false,
            description: '',
        )
        string(
            name: 'GIT_INTEGRATION_BRANCH',
            defaultValue: '${targetBranch}',
            description: 'Target branch for pull requests',
        )
        string(
            name: 'GIT_REMOTE_NAME',
            defaultValue: 'origin',
            description: 'Default remote',
        )
        string(
            name: 'KVM_HOST',
            defaultValue: 'evans',
            description: '',
        )
        string(
            name: 'MONGO_BRANCH',
            defaultValue: '${targetBranch}',
            description: '',
        )
        string(
            name: 'MONGO_REPO',
            defaultValue: "ssh://bitbucket.micron.com/sbusw/mongo.git",
            description: '''Mongo repo to use for cloning/updating. You probably should not change this.''',
        )
        string(
            name: 'MSE_CONNECTOR_PATH',
            defaultValue: 'src/mongo/db/modules/mongo-mse-kvdb',
            description: '''The path of the checked-out MSE connector within the parent MongoDB source tree.  You probably should not change this.''',
        )
        string(
            name: 'BUILD_PROJECT',
            defaultValue: 'nightfury',
            description: 'NightFury job',
        )
        string(
            name: 'OS_TYPE',
            defaultValue: "${params.NODE}",
            description: '',
        )
        string(
            name: 'SBUDEVOPS_DEBUG',
            defaultValue: '0',
            description: 'If 1, produce debugging output in sbu-devops python code.',
        )
        string(
            name: 'SBUDEVOPS_DRYRUN',
            defaultValue: '0',
            description: '''If set to 1 will set dryrun=1 in calls to sbudevops python library - disabling actual issue changes (transition / add comment)''',
        )
        string(
            name: 'SBUDEVOPS_STATUS_FILE',
            defaultValue: '/shared/builds/ansible/properties/$BUILD_TAG.hse_mongo.status',
            description: 'File to capture status messages on what was completed.',
        )
        string(
            name: 'SBUDEVOPS_AUTHOR_EMAIL_PROPERTY',
            defaultValue: '/shared/builds/ansible/properties/hse_mongo.author_email',
            description: '',
        )
        string(
            name: 'SBUDEVOPS_MSEKVDB_VERSION_PROPERTY',
            defaultValue: '/shared/builds/ansible/properties/HSEMONGO.version',
            description: '''Placeholder for MSEKVDB version.  We might not use this, as we have one for the RPM build in the MongoMSE job.''',
        )
        string(
            name: 'SBUDEVOPS_NF_VERSION_PROPERTY',
            defaultValue: '/shared/builds/ansible/properties/HSE_DEVEL.version',
            description: 'File to record version of nf devel RPM used for this build.',
        )
        string(
            name: 'SBUDEVOPS_PR_APPROVERS',
            defaultValue: '0',
            description: 'Minimum number of approvers for the pull request.',
        )
        string(
            name: 'SCONS_CACHE',
            defaultValue: '${WORKSPACE}/../mongo_scons_cache',
            description: '''Default path to scons cache, a cache of build outputs, stored by MD5 hash.  If a build output&lsquo;s antecedents have the same MD5 hash as they did in a previous build, then scons will save time by retrieving the build output (be it a generated sourge file, a .o, a library, or a linked executable) from the cache.  For some builds, this can result in a 10x speedup.''',
        )
        booleanParam(
            name: 'SKIP_CLANG_FORMAT',
            defaultValue: false,
            description: '''Turn off the formatting check.  This is primarily for debugging.  Should not be set in production.''',
        )
    }
    
    agent { label "${params.NODE}" }
    
    options {
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '',
                numToKeepStr: '90'
            )
        )
        timestamps()
        disableConcurrentBuilds()
    }
    stages {
        stage('Notify Bitbucket') {
            steps {
                script {
                    def y = new projects.notifyStash()
                    echo 'pipeline in progress, notify Bitbucket'
                    y.notifyStash("INPROGRESS", "${env.GIT_COMMIT}")
                }
            }
        }

        stage ( ' Update the lock file so that Mongo MultiDistro does not run when Mongo-MSE-KVDB is in progress') {
            steps {
                script {
                    cleanWs()
                    try {
                        sh """
                            echo \$((\$(cut -c 1 < /shared/jenkins-locks/msekvdb-mongo.lock)+1)) > /shared/jenkins-locks/msekvdb-mongo.lock
                        """
                    }
                    catch (error) {
                        echo " Could not increment lock count , something is messed up : ${error}"
                        throw error
                    }
                }
            }
        }

        stage("Set description") {
            steps {
                script {
                    currentBuild.description = "${params.OS_TYPE}"
                }
            }
        } // stage - Set description

        /*
         * TODO: stage-ify the mongo and mongo-mse-kvdb checkouts instead of
         * stuffing them into the giant mongo_mse_kvdb_build_cmd1 variable
         */

        /*
         * MU_REVISIT:  this doesn't work as documented.  It ends up
         * checking the connector out in both the specified subdir AND in
         * pwd.  Nonetheless, we need it for the email stage to work, so we do
         * it and then throw it away.
         */
        stage ('Checkout mongo-mse-kvdb') {
            steps {
                script {
                    echo "GIT_COMMIT=${env.GIT_COMMIT}"
                    echo "GIT_URL=${params.GIT_URL}"
                    echo "pullRequestId=${env.pullRequestId}"

                    try {
                        checkout([$class: 'GitSCM', branches: [[name: "${sourceBranch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'WipeWorkspace'], [$class: 'AuthorInChangelog'], [$class: 'PruneStaleBranch']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '07218d27-42d9-44cc-a27a-2324337d8d3b', url: 'ssh://git@bitbucket.micron.com/hse/hse-mongo.git']]]) 
                    }
                    catch (error) {
                        echo "Failed to clone connector repo: ${error}"
                        throw error
                    }
                }
            }
        }
        stage ('Mongo-mse-kvdb - email setup') {
            steps {
                script {
                    set_author_email(
                        GIT_COMMIT,
                        WORKSPACE,
                        SBUDEVOPS_AUTHOR_EMAIL_PROPERTY
                    )
                    echo "loading properties:"
                    load "${WORKSPACE}/SBUDEVOPS_AUTHOR_EMAIL.txt"
                    sh   "rm -f ${WORKSPACE}/SBUDEVOPS_AUTHOR_EMAIL.txt"
                }
            }
        }
        stage ('sbusw-mongo-mse-kvdb - build') {
            steps {
                script {
                    sh "${mongo_mse_kvdb_build_cmd1}"
                }
            }
        }
        stage("mongo-mse-kvdb - copy artifacts") {
            steps {
                script {
                    try {
                        sh """
                            echo "not needed now"
                        """
                    }
                    catch (error) {
                        echo "Could not copy prior unit test results: ${error}"
                        throw error
                    }
                }
            }
        }
        stage ('sbusw-mongo-mse-kvdb - Make/Install MongoMSE2') {
            steps {
                script {
                    try {
                        sh "${mongo_mse_kvdb_build_cmd2}"
                    }
                    catch (error) {
                        echo "Error processing current test results: ${error}"
                        throw error
                    }
                }
            }
        }/*
        stage("sbusw-mongo-mse-kvdb - uninstall nightfury devel package") {
            steps {
                script {
                    sh "${uninstall_nf_devel_cmd}"
                    sh "cat $SBUDEVOPS_STATUS_FILE"
                }
            }
        }*/
        stage("sbusw-mongo-mse-kvdb - Restore VM cleanup and save build data") {
            steps {
                script {
                    sh "${restore_vm_clean_build_data_cmd}"
                }
            }
        } // stage uninstall nf devel
    } // stages

    post {
        always {
            script {
                echo " Decrement the lock count "
                sh """
                    echo \$((\$(cut -c 1 < /shared/jenkins-locks/msekvdb-mongo.lock)-1)) > /shared/jenkins-locks/msekvdb-mongo.lock
                """
                echo "Build complete"
                
                if (currentBuild.currentResult == "SUCCESS") {
                    currentBuild.result = "SUCCESS"
                }
                sh """
                    . /usr/local/lib/jenkins.sh

                    banner "Saving build data in Mongo..."
                    /usr/local/bin/jenkins2mongo -f ${JENKINS_CONF} --show
                """.stripMargin()
            }
        }
        success {
            script {
                def y = new projects.notifyStash()
                echo 'success, notify Bitbucket'
                y.notifyStash("SUCCESS", "${env.GIT_COMMIT}")
                echo 'Build was successful!'
                echo "Replacing prior successful test results with current test results"
                try {
                sh """
                    #rm -rf ${PRIOR_TEST_RESULTS_DIR}/*
                    mkdir -p ${PRIOR_TEST_RESULTS_DIR}
                    #cp -p ${BUILD_NUMBER}.db ${PRIOR_TEST_RESULTS_DIR}
                """
                }
                catch (error) {
                    echo "Error saving new test results: ${error}"
                    throw error
                }

                archiveArtifacts(
                    allowEmptyArchive: false,
                    artifacts: '*.rpm, *.RECORDED_SHA, targetBranch',
                    caseSensitive: true,
                    defaultExcludes: true,
                    fingerprint: false,
                    onlyIfSuccessful: true 
                )
                mail(
                    subject: "from ${JOB_BASE_NAME}",
                    body: "Job was successful for ${env.JOB_BASE_NAME}"
                        + " (${env.BUILD_NUMBER}) \r\n on jenkins agent:"
                        + " ${NODE_NAME} \r\n For more details go to: "
                        + " ${env.BUILD_URL}consoleFull",
                        from: 'noreply-bojenkins@micron.com',
                        to: "${SBUDEVOPS_AUTHOR_EMAIL}"
                )/*
                build(
                    job: 'mongo-mse-multi-distro',
                    parameters: [
                        string(
                            name: 'MONGOVERSION',
                            value: "${MONGOVERSION}"
                        ),
                        string(
                            name: 'NIGHT_FURY_BRANCH',
                            value: "${NIGHT_FURY_BRANCH}"
                        )
                    ],
                    propagate: false,
                    wait: false
                )*/
            }
        }
        failure {
            script {
                def x = new projects.notifyStash()
                echo 'failed, notify Bitbucket'
                x.notifyStash("FAILED", "${env.GIT_COMMIT}")
                echo "Build failed"
                mail(
                    subject: "ERROR - from ${JOB_BASE_NAME}",
                    body: "Job: Job ${env.JOB_BASE_NAME} (${env.BUILD_NUMBER})"
                        + "\r\n For more details go to: "
                        + " ${env.BUILD_URL}consoleFull \r\n on jenkins agent:"
                        + " ${NODE_NAME}",
                    from: 'noreply-bojenkins@micron.com',
                    to: "${SBUDEVOPS_AUTHOR_EMAIL}"
                )
            }
        }
    } //post
} //pipeline

